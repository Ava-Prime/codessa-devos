# ==================================================================================
# Codessa DevOS - Continuous Integration & Deployment Pipeline
#
# This workflow automates code quality checks, testing, and deployment.
# It follows a staged approach to ensure reliability and efficiency:
#
#   ┌──────────┐   ┌────────────────────────┐   ┌─────────────────────┐   ┌──────────┐
#   │   Lint   ├─► │ Test & Collect Coverage├─► │ Deploy to Staging   ├─► │  Notify  │
#   └──────────┘   └────────────────────────┘   └(on main branch push)┘   └──────────┘
#
# Key Features:
# - Fails Fast: Linting provides quick feedback before running longer tests.
# - No Redundancy: Dependencies are installed only when needed.
# - Robust Testing: Runs tests across multiple Python versions in parallel.
# - Safe Deploys: Deployment only occurs if all previous stages pass on the main branch.
# - Smart Notifications: Sends detailed, structured status updates to Slack.
# ==================================================================================

name: Codessa DevOS CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Concurrency cancels in-progress runs on the same PR for newer commits.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # ==================================================================================
  # STAGE 1: LINTING & STATIC ANALYSIS
  # ==================================================================================
  lint:
    name: Lint & Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-py3.11-${{ hashFiles('**/requirements-dev.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run all pre-commit hooks (linting, formatting, etc.)
        run: pre-commit run --all-files --show-diff-on-failure

  # ==================================================================================
  # STAGE 2: TESTING & COVERAGE COLLECTION
  # ==================================================================================
  test:
    name: Test (Python ${{ matrix.python-version }})
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ hashFiles('**/requirements-dev.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        run: pytest --cov=src --cov-report=xml

      - name: Upload Coverage Report to Codecov
        uses: codecov/codecov-action@v3
        with:
          # The 'token' input is not required for public repositories.
          # If this repo becomes private, uncomment the next line and add CODECOV_TOKEN to secrets.
          # token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          flags: python${{ matrix.python-version }}
          fail_ci_if_error: true

  # ==================================================================================
  # STAGE 3: DEPLOYMENT (Main Branch Only)
  # ==================================================================================
  deploy:
    name: Deploy to Staging
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Deploy to Staging Environment
        run: |
          echo "🚀 Deploying to staging..."
          ./scripts/deploy.sh
          echo "✅ Deployment script finished."

  # ==================================================================================
  # STAGE 4: NOTIFICATION
  # This version is the BEST of both worlds: correct syntax and rich formatting.
  # ==================================================================================
  notify:
    name: Send Slack Notification
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always() # This job runs regardless of whether the previous jobs succeeded or failed.
    steps:
      - name: Set Slack Status Variables
        id: slack_status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "color=good" >> $GITHUB_OUTPUT
            echo "status=Success" >> $GITHUB_OUTPUT
          else
            echo "color=danger" >> $GITHUB_OUTPUT
            echo "status=Failed" >> $GITHUB_OUTPUT
          fi

      - name: Send Workflow Status to Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK:           
          # In your browser, go to your GitHub repository > Settings > Secrets and variables > Actions > New repository secret
          
          # Name: SLACK_WEBHOOK
          
          # Value: <your Slack webhook URL>
          
          SLACK_USERNAME: "Codessa CI Bot"
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_ATTACHMENTS: |
            [
              {
                "fallback": "Build status for ${{ github.repository }}: ${{ steps.slack_status.outputs.status }}",
                "color": "${{ steps.slack_status.outputs.color }}",
                "title": "Build Status: ${{ steps.slack_status.outputs.status }}",
                "title_link": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                "fields": [
                  {
                    "title": "Repository",
                    "value": "${{ github.repository }}",
                    "short": true
                  },
                  {
                    "title": "Branch",
                    "value": "${{ github.ref_name }}",
                    "short": true
                  },
                  {
                    "title": "Triggered by",
                    "value": "${{ github.actor }}",
                "ts": ${{ github.event.repository.pushed_at || github.event.pull_request.updated_at || github.run_id }}
                  },
                  {
                    "title": "Event",
                    "value": "${{ github.event_name }}",
                    "short": true
                  }
                ],
                "footer": "Codessa DevOS",
                "ts": ${{ github.event.repository.pushed_at || github.event.pull_request.updated_at }}
              }
            ]
