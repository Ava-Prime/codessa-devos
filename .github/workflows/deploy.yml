# ==================================================================================
# Codessa DevOS - Continuous Deployment to Google Cloud Run
#
# This workflow automates building a Docker container, pushing it to Google
# Artifact Registry, and deploying it as a new revision to Google Cloud Run.
#
# Key Features:
# - Secure Authentication: Uses Workload Identity Federation, the recommended
#   method for keyless authentication to Google Cloud.
# - Efficient Deployment: Leverages the official 'deploy-cloudrun' action, which
#   handles building, pushing, and deploying in one optimized step.
# - Best Practices:
#   - Pushes to Artifact Registry (the successor to GCR).
#   - Tags images with the Git commit SHA for traceability and easy rollbacks.
#   - Uses GitHub Environments for managing deployment-specific secrets and rules.
# - Configurable: Key settings are managed as environment variables for easy updates.
# ==================================================================================

name: Deploy to Cloud Run

on:
  push:
    branches: [ main ]

# Environment variables available to all jobs.
# REQUIRED: Update these placeholders with your actual GCP configuration.
env:
  GCP_PROJECT_ID: your-gcp-project-id  # <-- Replace with your Project ID
  GCP_REGION: us-central1              # <-- Replace with your Cloud Run region
  SERVICE_NAME: codessa-devos          # The name of your Cloud Run service
  # The location for Artifact Registry. e.g., us-central1-docker, europe-west1-docker
  GAR_LOCATION: us-central1-docker

jobs:
  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest

    # Use GitHub Environments to control deployments and store secrets
    # Ensure 'Production' is defined in your repository's Environments settings
    environment: Production

    # Add permissions for Workload Identity Federation
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          # REQUIRED: Configure Workload Identity Federation in GCP and create a secret
          # in GitHub (e.g., GCP_WORKLOAD_IDENTITY_PROVIDER) with the provider name.
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          # Make sure the secret 'GCP_WORKLOAD_IDENTITY_PROVIDER' exists in your repository or environment.

          # REQUIRED: The email of the service account to impersonate. Create a secret
          # in GitHub (e.g., GCP_SERVICE_ACCOUNT) with this value.
          # Example: github-actions-runner@your-project-id.iam.gserviceaccount.com
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          # Make sure the secret 'GCP_SERVICE_ACCOUNT' exists in your repository or environment.
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Build and Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: ${{ env.SERVICE_NAME }}
          region: ${{ env.GCP_REGION }}
          # The image name to build and push to Google Artifact Registry.
          # The repository (e.g., 'codessa-devos') must exist in GAR.
          image: ${{ env.GAR_LOCATION }}.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.SERVICE_NAME }}/${{ env.SERVICE_NAME }}:${{ github.sha }}

          # If your Dockerfile is not at the root, specify the source directory.
          # source: ./app

          # Optional: Pass environment variables to the Cloud Run service from GitHub secrets.
          # env_vars: |
          #   GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          #   ANOTHER_VAR=some_value

      - name: Show Deployed URL
        run: echo "✅ Successfully deployed to ${{ steps.deploy.outputs.url }}"

      - name: Send Slack Notification on Success
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          # Make sure the secret 'SLACK_WEBHOOK' exists in your repository or environment.
          SLACK_TITLE: "✅ Deployment Successful: ${{ env.SERVICE_NAME }}"
          SLACK_USERNAME: "Codessa Deploy Bot"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "good"
          SLACK_MESSAGE: "A new version of *${{ env.SERVICE_NAME }}* has been deployed to production. Visit at ${{ steps.deploy.outputs.url }}"
          SLACK_ICON_EMOJI: ":rocket:"
          SLACK_COLOR: "good"
          SLACK_MESSAGE: "A new version of *${{ env.SERVICE_NAME }}* has been deployed to production. Visit at ${{ steps.deploy.outputs.url }}"
